import{_ as e,o as a,c as i,a as s}from"./app.793a33e0.js";const n={},d=s(`<h1 id="building" tabindex="-1"><a class="header-anchor" href="#building" aria-hidden="true">#</a> Building</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>By default, a project is build for the web and you just have to run</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Your build files will be available under <code>./build/web</code></li><li>Your game is exported as a <strong>SPA</strong> (<strong>S</strong>ingle <strong>P</strong>age <strong>A</strong>pp)</li><li>A single <code>index.html</code> file, and only static asset files (no server or config required)</li></ul><h2 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> Base</h2><p>By default, we use relative path, but for some deployment, you may need to expose the game in a subfolder and not the root of your domain. Something which may cause some URL issues.</p><p>For that, you can specify a subfolder at build time to rewrite URLs and assets</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> build --base<span class="token operator">=</span>/myfolder/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> Define</h2><p>Soon</p><h2 id="desktop-app" tabindex="-1"><a class="header-anchor" href="#desktop-app" aria-hidden="true">#</a> Desktop App</h2><p>Soon</p>`,13),r=[d];function o(t,l){return a(),i("div",null,r)}var u=e(n,[["render",o],["__file","building.html.vue"]]);export{u as default};
