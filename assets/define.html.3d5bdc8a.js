import{_ as n,o as s,c as a,a as e}from"./app.f029edd0.js";const t={},o=e(`<h1 id="define-constant" tabindex="-1"><a class="header-anchor" href="#define-constant" aria-hidden="true">#</a> Define Constant</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>For development it can be really convenient to have different behaviors, not present in production. This can be really useful for things like version, debug tools, inject variable name, turn on or off some UI.</p><p>So for that, we provide you a way to inject constant at build time.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>in <code>package.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token property">&quot;pixel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;define&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;develop&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// this is for yarn dev</span>
        <span class="token property">&quot;APP_VERSION&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;APP_DEBUG&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// this is for yarn build or yarn preview</span>
        <span class="token property">&quot;APP_VERSION&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;APP_DEBUG&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For typescript, create a file like <code>src/env.d.ts</code> and type those variables</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// define env variable types</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token constant">APP_VERSION</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token constant">APP_DEBUG</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you are ready to go, now those constant are available everywhere in your app.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h3 id="conditional-import" tabindex="-1"><a class="header-anchor" href="#conditional-import" aria-hidden="true">#</a> Conditional Import</h3><p>To keep the code clean, the debug logic can be managed in separated file then only loaded if needed</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../game/debug&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This also allow to have conditional libraries import, only in development and strip from the build</p><h3 id="string-constants-and-quotes" tabindex="-1"><a class="header-anchor" href="#string-constants-and-quotes" aria-hidden="true">#</a> String Constants (and quotes)</h3><p><strong>Warning</strong>: those constants are not true variables, they are replaced at build time with a string replacement.</p><p>For boolean and numbers this is not a problem, but for string you have to be careful with the lack of quotes.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// this work work</span>
<span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token constant">APP_DEBUG</span> <span class="token comment">// -&gt; \`const debug = true\`</span>

<span class="token comment">// those will not work</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Current App is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">APP_VERSION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// -&gt; \`Current App is \${dev}\`</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token constant">APP_VERSION</span> <span class="token comment">// -&gt; \`const name = dev\`</span>

<span class="token comment">// but those will</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Current App is APP_VERSION&quot;</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; &quot;Current App is dev&quot;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;APP_VERSION&quot;</span> <span class="token comment">// -&gt; \`const name = &quot;dev&quot;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another way to avoid this problem is to put quotes directly in the define value</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token property">&quot;pixel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;define&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token property">&quot;APP_VERSION&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\&quot;dev\\&quot;&quot;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now you can use it as a normal string</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This is my version : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">APP_VERSION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23),p=[o];function i(c,l){return s(),a("div",null,p)}var u=n(t,[["render",i],["__file","define.html.vue"]]);export{u as default};
