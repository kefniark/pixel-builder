import{_ as n,o as s,c as a,a as e}from"./app.6e891ef3.js";const t={},o=e(`<h1 id="entity-component-system-ecs" tabindex="-1"><a class="header-anchor" href="#entity-component-system-ecs" aria-hidden="true">#</a> Entity Component System (ECS)</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Entity-Component\u2013System (ECS) is an architectural pattern and a functional approach widely used in game application development. ECS follows the composition over the inheritance principle, which offers better flexibility and helps you to identify entities where all objects in a game\u2019s scene are considered an entity.</p><ul><li>Entity: <ul><li>An entity is a distinct object representing an actor in a simulated space (Equivalent of a class instance)</li><li>In most ECS system, entity has no properties or just a unique ID</li><li>Example: Player, Cat, Tree, ...</li></ul></li><li>Component: <ul><li>Components are pure data, representing and store properties for one specific behavior</li><li>Components are attached to entities, which make them reusable and composable</li><li>Example: PositionComponent, InputComponent, PhysicsComponent</li></ul></li><li>System: <ul><li>System are pure logic, a function which will often run at a predefined pace (each frame, each second, ...)</li><li>System will query set of specific components and do apply some logic on them</li><li>Example: <code>PhysicsSystem</code> will use <code>PhysicsComponent</code> data to calculate and update <code>PositionComponent</code></li></ul></li></ul><h2 id="pixel-builder" tabindex="-1"><a class="header-anchor" href="#pixel-builder" aria-hidden="true">#</a> Pixel Builder</h2><p>Pixel Builder comes with his own Entity Component System, simple and fully typed.</p><p>Which makes it easy to get started for small games or prototypes</p><h3 id="create-a-world" tabindex="-1"><a class="header-anchor" href="#create-a-world" aria-hidden="true">#</a> Create a world</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createWorld <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pixel-builder/ecs&quot;</span>

<span class="token comment">// define all your components (schema and default values)</span>
<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span>
  position<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  sprite<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> scale<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// create a world with those components</span>
<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token function">createWorld</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> components<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-entities" tabindex="-1"><a class="header-anchor" href="#create-entities" aria-hidden="true">#</a> Create Entities</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// from there you can create entities and attach components</span>
<span class="token keyword">const</span> ent <span class="token operator">=</span> world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
world<span class="token punctuation">.</span><span class="token function">addComponent</span><span class="token punctuation">(</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// you can also do both in a one-liner</span>
world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-systems-and-queries" tabindex="-1"><a class="header-anchor" href="#create-systems-and-queries" aria-hidden="true">#</a> Create Systems and Queries</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// create different system to interact with those components</span>
world<span class="token punctuation">.</span><span class="token function">addSystem</span><span class="token punctuation">(</span><span class="token string">&quot;move&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryEntities <span class="token operator">=</span> world<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token function">queryEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entity<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> dt
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// ...</span>

<span class="token comment">// update those systems</span>
world<span class="token punctuation">.</span><span class="token function">updateSystems</span><span class="token punctuation">(</span><span class="token string">&quot;move&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="extra-\u{1F4A5}" tabindex="-1"><a class="header-anchor" href="#extra-\u{1F4A5}" aria-hidden="true">#</a> Extra \u{1F4A5}</h2><h3 id="world-context" tabindex="-1"><a class="header-anchor" href="#world-context" aria-hidden="true">#</a> World Context</h3><p>To make interaction with third party librairies easier (physics, networking, audio, ...), when creating a world, simply pass a context object. This will be carried over and accessible in every systems.</p><p>This context allow to avoid usage of Singleton, and keep the code testable and modular</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">WorldContext</span> <span class="token punctuation">{</span>
  app<span class="token operator">:</span> Application <span class="token comment">// some third party library</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createWorld</span><span class="token generic class-name"><span class="token operator">&lt;</span>WorldContext<span class="token punctuation">,</span> WorldComponents<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> app <span class="token punctuation">}</span><span class="token punctuation">,</span> components<span class="token punctuation">)</span>

<span class="token comment">// then later in systems</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> MovementSystem <span class="token operator">=</span> <span class="token punctuation">(</span>world<span class="token operator">:</span> World<span class="token operator">&lt;</span>WorldContext<span class="token punctuation">,</span> WorldComponents<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> System <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryEntities <span class="token operator">=</span> world<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ent <span class="token keyword">of</span> <span class="token function">queryEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        world<span class="token punctuation">.</span>context<span class="token punctuation">.</span>app <span class="token comment">// &lt;= here you can access your object</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="component-added" tabindex="-1"><a class="header-anchor" href="#component-added" aria-hidden="true">#</a> Component Added</h3><p>When a component is added or removed, it can be useful to run some specific code. For that, Query allow to filter entity <code>added</code> or <code>removed</code> in the same frame.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> queryEntities <span class="token operator">=</span> world<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ent <span class="token keyword">of</span> <span class="token function">queryEntities</span><span class="token punctuation">(</span><span class="token string">&quot;added&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// only new components</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ent <span class="token keyword">of</span> <span class="token function">queryEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// all components</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ent <span class="token keyword">of</span> <span class="token function">queryEntities</span><span class="token punctuation">(</span><span class="token string">&quot;removed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// only removed components</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>P.S. <code>added</code> and <code>removed</code> are only available in the same update loop, so it depends on the system execution order.</p>`,23),p=[o];function c(i,l){return s(),a("div",null,p)}var r=n(t,[["render",c],["__file","ecs.html.vue"]]);export{r as default};
